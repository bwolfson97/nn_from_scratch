# AUTOGENERATED! DO NOT EDIT! File to edit: 01_module.ipynb (unless otherwise specified).

__all__ = ['Module', 'Linear', 'Dense']

# Cell
from .autodiff import Variable

# Cell
class Module:
    def __init__(self):
        # Tracks Module's variables and sub-modules
        self._params = []

    def __call__(self, *args, **kwargs):
        raise NotImplementedError

    def __setattr__(self, name, value):
        if isinstance(value, Variable):
            # track variables
            self._params.append(value)
        if isinstance(value, Module):
            self._params.append(value)
        super().__setattr__(name, value)

    def params(self):
        params = []
        for p in self._params:
            if isinstance(p, Module):
                params += p.params()
            else:
                params.append(p)
        return params

# Cell
class Linear(Module):
    """Outputs y = w1*x1 + ... + wn*xn, where n is the # of input channels."""
    def __init__(self, in_c):
        self.
        super().__init__()

# Cell
class Dense(Module):
    def __init__(self, in_c, out_c):

        super().__init__()